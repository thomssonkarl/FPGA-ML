-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dot_product_dot_product_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2_VITIS_LOOP_10_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mul_ln6_1 : IN STD_LOGIC_VECTOR (70 downto 0);
    mul_ln6 : IN STD_LOGIC_VECTOR (38 downto 0);
    result_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_we0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    arr1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    arr1_ce0 : OUT STD_LOGIC;
    arr1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    arr2_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    arr2_ce0 : OUT STD_LOGIC;
    arr2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dot_product_dot_product_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2_VITIS_LOOP_10_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv39_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv71_0 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv71_1 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv39_1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_320 : STD_LOGIC_VECTOR (16 downto 0) := "00000001100100000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln7_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln8_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_436 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_436_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln7_reg_442_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_reg_447_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_reg_447_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_reg_447_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_reg_447_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_reg_447_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_reg_447_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln8_fu_218_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln8_reg_452 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln11_fu_226_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln11_reg_457 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln11_reg_457_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln11_reg_457_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln11_fu_270_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln11_reg_463 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln10_1_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_1_reg_468 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_1_reg_468_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_1_reg_468_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_1_reg_468_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_1_reg_468_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_1_reg_468_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln8_2_fu_311_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln8_2_reg_472 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln8_2_reg_472_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln8_2_reg_472_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln8_2_reg_472_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln8_2_reg_472_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln11_1_fu_318_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln11_1_reg_478 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln11_1_reg_478_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln11_1_reg_478_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln11_1_reg_478_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln11_1_reg_478_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal arr1_load_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal arr2_load_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln11_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln11_1_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln11_2_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_fu_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sum_1_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_64 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln10_fu_274_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (6 downto 0);
    signal j_fu_68 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal indvar_flatten_fu_72 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000000";
    signal select_ln8_3_fu_236_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal i_fu_76 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln7_1_fu_263_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten19_fu_80 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln7_1_fu_180_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal icmp_ln10_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln7_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_1_fu_230_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln7_fu_257_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln7_fu_298_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln8_fu_305_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln11_1_fu_318_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln11_fu_328_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_371_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln13_fu_351_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln8_1_fu_344_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_371_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_371_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_371_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_371_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dot_product_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dot_product_mul_17s_11ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component dot_product_mac_muladd_7ns_10ns_17ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component dot_product_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_2_1_U1 : component dot_product_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => arr2_load_reg_499,
        din1 => arr1_load_reg_494,
        ce => ap_const_logic_1,
        dout => grp_fu_135_p2);

    mul_17s_11ns_17_1_1_U2 : component dot_product_mul_17s_11ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => trunc_ln11_reg_463,
        din1 => mul_ln11_1_fu_318_p1,
        dout => mul_ln11_1_fu_318_p2);

    mac_muladd_7ns_10ns_17ns_17_4_1_U3 : component dot_product_mac_muladd_7ns_10ns_17ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 10,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_371_p0,
        din1 => grp_fu_371_p1,
        din2 => grp_fu_371_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_371_p3);

    flow_control_loop_pipe_sequential_init_U : component dot_product_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    i_fu_76 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    i_fu_76 <= select_ln7_1_fu_263_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten19_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten19_fu_80 <= ap_const_lv71_0;
                elsif (((icmp_ln7_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten19_fu_80 <= add_ln7_1_fu_180_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_72 <= ap_const_lv39_0;
                elsif (((icmp_ln7_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_72 <= select_ln8_3_fu_236_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    j_fu_68 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    j_fu_68 <= select_ln8_2_fu_311_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    k_fu_64 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    k_fu_64 <= add_ln10_fu_274_p2;
                end if;
            end if; 
        end if;
    end process;

    sum_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    sum_fu_60 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter8 = ap_const_logic_1)) then 
                    sum_fu_60 <= sum_1_fu_360_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln7_reg_442 <= and_ln7_fu_206_p2;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln8_reg_436 <= icmp_ln8_fu_189_p2;
                or_ln8_reg_447 <= or_ln8_fu_212_p2;
                select_ln8_reg_452 <= select_ln8_fu_218_p3;
                    zext_ln11_reg_457(6 downto 0) <= zext_ln11_fu_226_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln7_reg_442_pp0_iter2_reg <= and_ln7_reg_442;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                arr1_load_reg_494 <= arr1_q0;
                arr2_load_reg_499 <= arr2_q0;
                icmp_ln10_1_reg_468 <= icmp_ln10_1_fu_279_p2;
                icmp_ln10_1_reg_468_pp0_iter3_reg <= icmp_ln10_1_reg_468;
                icmp_ln10_1_reg_468_pp0_iter4_reg <= icmp_ln10_1_reg_468_pp0_iter3_reg;
                icmp_ln10_1_reg_468_pp0_iter5_reg <= icmp_ln10_1_reg_468_pp0_iter4_reg;
                icmp_ln10_1_reg_468_pp0_iter6_reg <= icmp_ln10_1_reg_468_pp0_iter5_reg;
                icmp_ln10_1_reg_468_pp0_iter7_reg <= icmp_ln10_1_reg_468_pp0_iter6_reg;
                icmp_ln8_reg_436_pp0_iter2_reg <= icmp_ln8_reg_436;
                mul_ln11_1_reg_478 <= mul_ln11_1_fu_318_p2;
                mul_ln11_1_reg_478_pp0_iter4_reg <= mul_ln11_1_reg_478;
                mul_ln11_1_reg_478_pp0_iter5_reg <= mul_ln11_1_reg_478_pp0_iter4_reg;
                mul_ln11_1_reg_478_pp0_iter6_reg <= mul_ln11_1_reg_478_pp0_iter5_reg;
                mul_ln11_1_reg_478_pp0_iter7_reg <= mul_ln11_1_reg_478_pp0_iter6_reg;
                mul_ln11_reg_504 <= grp_fu_135_p2;
                or_ln8_reg_447_pp0_iter2_reg <= or_ln8_reg_447;
                or_ln8_reg_447_pp0_iter3_reg <= or_ln8_reg_447_pp0_iter2_reg;
                or_ln8_reg_447_pp0_iter4_reg <= or_ln8_reg_447_pp0_iter3_reg;
                or_ln8_reg_447_pp0_iter5_reg <= or_ln8_reg_447_pp0_iter4_reg;
                or_ln8_reg_447_pp0_iter6_reg <= or_ln8_reg_447_pp0_iter5_reg;
                or_ln8_reg_447_pp0_iter7_reg <= or_ln8_reg_447_pp0_iter6_reg;
                select_ln8_2_reg_472 <= select_ln8_2_fu_311_p3;
                select_ln8_2_reg_472_pp0_iter4_reg <= select_ln8_2_reg_472;
                select_ln8_2_reg_472_pp0_iter5_reg <= select_ln8_2_reg_472_pp0_iter4_reg;
                select_ln8_2_reg_472_pp0_iter6_reg <= select_ln8_2_reg_472_pp0_iter5_reg;
                select_ln8_2_reg_472_pp0_iter7_reg <= select_ln8_2_reg_472_pp0_iter6_reg;
                trunc_ln11_reg_463 <= trunc_ln11_fu_270_p1;
                    zext_ln11_reg_457_pp0_iter2_reg(6 downto 0) <= zext_ln11_reg_457(6 downto 0);
                    zext_ln11_reg_457_pp0_iter3_reg(6 downto 0) <= zext_ln11_reg_457_pp0_iter2_reg(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln11_reg_457(16 downto 7) <= "0000000000";
    zext_ln11_reg_457_pp0_iter2_reg(16 downto 7) <= "0000000000";
    zext_ln11_reg_457_pp0_iter3_reg(16 downto 7) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln10_fu_274_p2 <= std_logic_vector(unsigned(select_ln8_reg_452) + unsigned(ap_const_lv7_1));
    add_ln11_fu_328_p2 <= std_logic_vector(unsigned(mul_ln11_1_reg_478) + unsigned(zext_ln11_reg_457_pp0_iter3_reg));
    add_ln13_fu_351_p2 <= std_logic_vector(unsigned(mul_ln11_1_reg_478_pp0_iter7_reg) + unsigned(select_ln8_2_reg_472_pp0_iter7_reg));
    add_ln7_1_fu_180_p2 <= std_logic_vector(unsigned(indvar_flatten19_fu_80) + unsigned(ap_const_lv71_1));
    add_ln7_fu_257_p2 <= std_logic_vector(unsigned(i_fu_76) + unsigned(ap_const_lv31_1));
    add_ln8_1_fu_230_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_72) + unsigned(ap_const_lv39_1));
    add_ln8_fu_305_p2 <= std_logic_vector(unsigned(select_ln7_fu_298_p3) + unsigned(ap_const_lv17_1));
    and_ln7_fu_206_p2 <= (xor_ln7_fu_194_p2 and icmp_ln10_fu_200_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln7_fu_175_p2)
    begin
        if (((icmp_ln7_fu_175_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, k_fu_64, add_ln10_fu_274_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_k_load <= add_ln10_fu_274_p2;
        else 
            ap_sig_allocacmp_k_load <= k_fu_64;
        end if; 
    end process;

    arr1_address0 <= zext_ln11_1_fu_332_p1(17 - 1 downto 0);

    arr1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            arr1_ce0 <= ap_const_logic_1;
        else 
            arr1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arr2_address0 <= zext_ln11_2_fu_337_p1(17 - 1 downto 0);

    arr2_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            arr2_ce0 <= ap_const_logic_1;
        else 
            arr2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_371_p0 <= grp_fu_371_p00(7 - 1 downto 0);
    grp_fu_371_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln8_fu_218_p3),17));
    grp_fu_371_p1 <= ap_const_lv17_320(10 - 1 downto 0);
    grp_fu_371_p2 <= 
        add_ln8_fu_305_p2 when (and_ln7_reg_442_pp0_iter2_reg(0) = '1') else 
        select_ln7_fu_298_p3;
    icmp_ln10_1_fu_279_p2 <= "1" when (add_ln10_fu_274_p2 = ap_const_lv7_64) else "0";
    icmp_ln10_fu_200_p2 <= "1" when (ap_sig_allocacmp_k_load = ap_const_lv7_64) else "0";
    icmp_ln7_fu_175_p2 <= "1" when (indvar_flatten19_fu_80 = mul_ln6_1) else "0";
    icmp_ln8_fu_189_p2 <= "1" when (indvar_flatten_fu_72 = mul_ln6) else "0";
    mul_ln11_1_fu_318_p1 <= ap_const_lv17_320(11 - 1 downto 0);
    or_ln8_fu_212_p2 <= (icmp_ln8_fu_189_p2 or and_ln7_fu_206_p2);
    result_address0 <= zext_ln13_fu_355_p1(17 - 1 downto 0);

    result_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= std_logic_vector(unsigned(mul_ln11_reg_504) + unsigned(select_ln8_1_fu_344_p3));

    result_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, icmp_ln10_1_reg_468_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln10_1_reg_468_pp0_iter7_reg = ap_const_lv1_1))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln7_1_fu_263_p3 <= 
        add_ln7_fu_257_p2 when (icmp_ln8_reg_436(0) = '1') else 
        i_fu_76;
    select_ln7_fu_298_p3 <= 
        ap_const_lv17_0 when (icmp_ln8_reg_436_pp0_iter2_reg(0) = '1') else 
        j_fu_68;
    select_ln8_1_fu_344_p3 <= 
        ap_const_lv32_0 when (or_ln8_reg_447_pp0_iter7_reg(0) = '1') else 
        sum_fu_60;
    select_ln8_2_fu_311_p3 <= 
        add_ln8_fu_305_p2 when (and_ln7_reg_442_pp0_iter2_reg(0) = '1') else 
        select_ln7_fu_298_p3;
    select_ln8_3_fu_236_p3 <= 
        ap_const_lv39_1 when (icmp_ln8_fu_189_p2(0) = '1') else 
        add_ln8_1_fu_230_p2;
    select_ln8_fu_218_p3 <= 
        ap_const_lv7_0 when (or_ln8_fu_212_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    sum_1_fu_360_p2 <= std_logic_vector(unsigned(mul_ln11_reg_504) + unsigned(select_ln8_1_fu_344_p3));
    trunc_ln11_fu_270_p1 <= select_ln7_1_fu_263_p3(17 - 1 downto 0);
    xor_ln7_fu_194_p2 <= (icmp_ln8_fu_189_p2 xor ap_const_lv1_1);
    zext_ln11_1_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_fu_328_p2),64));
    zext_ln11_2_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_371_p3),64));
    zext_ln11_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln8_fu_218_p3),17));
    zext_ln13_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_fu_351_p2),64));
end behav;
