// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dot_product_dot_product_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2_VITIS_LOOP_10_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mul_ln6_1,
        mul_ln6,
        result_address0,
        result_ce0,
        result_we0,
        result_d0,
        arr1_address0,
        arr1_ce0,
        arr1_q0,
        arr2_address0,
        arr2_ce0,
        arr2_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [70:0] mul_ln6_1;
input  [38:0] mul_ln6;
output  [16:0] result_address0;
output   result_ce0;
output   result_we0;
output  [31:0] result_d0;
output  [16:0] arr1_address0;
output   arr1_ce0;
input  [31:0] arr1_q0;
output  [16:0] arr2_address0;
output   arr2_ce0;
input  [31:0] arr2_q0;

reg ap_idle;
reg result_ce0;
reg result_we0;
reg arr1_ce0;
reg arr2_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln7_fu_175_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln8_fu_189_p2;
reg   [0:0] icmp_ln8_reg_436;
reg   [0:0] icmp_ln8_reg_436_pp0_iter2_reg;
wire   [0:0] and_ln7_fu_206_p2;
reg   [0:0] and_ln7_reg_442;
reg   [0:0] and_ln7_reg_442_pp0_iter2_reg;
wire   [0:0] or_ln8_fu_212_p2;
reg   [0:0] or_ln8_reg_447;
reg   [0:0] or_ln8_reg_447_pp0_iter2_reg;
reg   [0:0] or_ln8_reg_447_pp0_iter3_reg;
reg   [0:0] or_ln8_reg_447_pp0_iter4_reg;
reg   [0:0] or_ln8_reg_447_pp0_iter5_reg;
reg   [0:0] or_ln8_reg_447_pp0_iter6_reg;
reg   [0:0] or_ln8_reg_447_pp0_iter7_reg;
wire   [6:0] select_ln8_fu_218_p3;
reg   [6:0] select_ln8_reg_452;
wire   [16:0] zext_ln11_fu_226_p1;
reg   [16:0] zext_ln11_reg_457;
reg   [16:0] zext_ln11_reg_457_pp0_iter2_reg;
reg   [16:0] zext_ln11_reg_457_pp0_iter3_reg;
wire  signed [16:0] trunc_ln11_fu_270_p1;
reg  signed [16:0] trunc_ln11_reg_463;
wire   [0:0] icmp_ln10_1_fu_279_p2;
reg   [0:0] icmp_ln10_1_reg_468;
reg   [0:0] icmp_ln10_1_reg_468_pp0_iter3_reg;
reg   [0:0] icmp_ln10_1_reg_468_pp0_iter4_reg;
reg   [0:0] icmp_ln10_1_reg_468_pp0_iter5_reg;
reg   [0:0] icmp_ln10_1_reg_468_pp0_iter6_reg;
reg   [0:0] icmp_ln10_1_reg_468_pp0_iter7_reg;
wire   [16:0] select_ln8_2_fu_311_p3;
reg   [16:0] select_ln8_2_reg_472;
reg   [16:0] select_ln8_2_reg_472_pp0_iter4_reg;
reg   [16:0] select_ln8_2_reg_472_pp0_iter5_reg;
reg   [16:0] select_ln8_2_reg_472_pp0_iter6_reg;
reg   [16:0] select_ln8_2_reg_472_pp0_iter7_reg;
wire   [16:0] mul_ln11_1_fu_318_p2;
reg   [16:0] mul_ln11_1_reg_478;
reg   [16:0] mul_ln11_1_reg_478_pp0_iter4_reg;
reg   [16:0] mul_ln11_1_reg_478_pp0_iter5_reg;
reg   [16:0] mul_ln11_1_reg_478_pp0_iter6_reg;
reg   [16:0] mul_ln11_1_reg_478_pp0_iter7_reg;
reg  signed [31:0] arr1_load_reg_494;
reg  signed [31:0] arr2_load_reg_499;
wire   [31:0] grp_fu_135_p2;
reg   [31:0] mul_ln11_reg_504;
wire   [63:0] zext_ln11_1_fu_332_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln11_2_fu_337_p1;
wire   [63:0] zext_ln13_fu_355_p1;
reg   [31:0] sum_fu_60;
wire   [31:0] sum_1_fu_360_p2;
wire    ap_loop_init;
reg   [6:0] k_fu_64;
wire   [6:0] add_ln10_fu_274_p2;
reg   [6:0] ap_sig_allocacmp_k_load;
reg   [16:0] j_fu_68;
reg   [38:0] indvar_flatten_fu_72;
wire   [38:0] select_ln8_3_fu_236_p3;
reg   [30:0] i_fu_76;
wire   [30:0] select_ln7_1_fu_263_p3;
reg   [70:0] indvar_flatten19_fu_80;
wire   [70:0] add_ln7_1_fu_180_p2;
wire   [0:0] icmp_ln10_fu_200_p2;
wire   [0:0] xor_ln7_fu_194_p2;
wire   [38:0] add_ln8_1_fu_230_p2;
wire   [30:0] add_ln7_fu_257_p2;
wire   [16:0] select_ln7_fu_298_p3;
wire   [16:0] add_ln8_fu_305_p2;
wire   [10:0] mul_ln11_1_fu_318_p1;
wire   [16:0] add_ln11_fu_328_p2;
wire   [16:0] grp_fu_371_p3;
wire   [16:0] add_ln13_fu_351_p2;
wire   [31:0] select_ln8_1_fu_344_p3;
wire   [6:0] grp_fu_371_p0;
wire   [9:0] grp_fu_371_p1;
wire   [16:0] grp_fu_371_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [16:0] grp_fu_371_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 sum_fu_60 = 32'd0;
#0 k_fu_64 = 7'd0;
#0 j_fu_68 = 17'd0;
#0 indvar_flatten_fu_72 = 39'd0;
#0 i_fu_76 = 31'd0;
#0 indvar_flatten19_fu_80 = 71'd0;
#0 ap_done_reg = 1'b0;
end

dot_product_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(arr2_load_reg_499),
    .din1(arr1_load_reg_494),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

dot_product_mul_17s_11ns_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 17 ))
mul_17s_11ns_17_1_1_U2(
    .din0(trunc_ln11_reg_463),
    .din1(mul_ln11_1_fu_318_p1),
    .dout(mul_ln11_1_fu_318_p2)
);

dot_product_mac_muladd_7ns_10ns_17ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
mac_muladd_7ns_10ns_17ns_17_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_371_p0),
    .din1(grp_fu_371_p1),
    .din2(grp_fu_371_p2),
    .ce(1'b1),
    .dout(grp_fu_371_p3)
);

dot_product_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            i_fu_76 <= 31'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_fu_76 <= select_ln7_1_fu_263_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_80 <= 71'd0;
        end else if (((icmp_ln7_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten19_fu_80 <= add_ln7_1_fu_180_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_72 <= 39'd0;
        end else if (((icmp_ln7_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_72 <= select_ln8_3_fu_236_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            j_fu_68 <= 17'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            j_fu_68 <= select_ln8_2_fu_311_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            k_fu_64 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            k_fu_64 <= add_ln10_fu_274_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            sum_fu_60 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter8 == 1'b1)) begin
            sum_fu_60 <= sum_1_fu_360_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln7_reg_442 <= and_ln7_fu_206_p2;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln8_reg_436 <= icmp_ln8_fu_189_p2;
        or_ln8_reg_447 <= or_ln8_fu_212_p2;
        select_ln8_reg_452 <= select_ln8_fu_218_p3;
        zext_ln11_reg_457[6 : 0] <= zext_ln11_fu_226_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln7_reg_442_pp0_iter2_reg <= and_ln7_reg_442;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        arr1_load_reg_494 <= arr1_q0;
        arr2_load_reg_499 <= arr2_q0;
        icmp_ln10_1_reg_468 <= icmp_ln10_1_fu_279_p2;
        icmp_ln10_1_reg_468_pp0_iter3_reg <= icmp_ln10_1_reg_468;
        icmp_ln10_1_reg_468_pp0_iter4_reg <= icmp_ln10_1_reg_468_pp0_iter3_reg;
        icmp_ln10_1_reg_468_pp0_iter5_reg <= icmp_ln10_1_reg_468_pp0_iter4_reg;
        icmp_ln10_1_reg_468_pp0_iter6_reg <= icmp_ln10_1_reg_468_pp0_iter5_reg;
        icmp_ln10_1_reg_468_pp0_iter7_reg <= icmp_ln10_1_reg_468_pp0_iter6_reg;
        icmp_ln8_reg_436_pp0_iter2_reg <= icmp_ln8_reg_436;
        mul_ln11_1_reg_478 <= mul_ln11_1_fu_318_p2;
        mul_ln11_1_reg_478_pp0_iter4_reg <= mul_ln11_1_reg_478;
        mul_ln11_1_reg_478_pp0_iter5_reg <= mul_ln11_1_reg_478_pp0_iter4_reg;
        mul_ln11_1_reg_478_pp0_iter6_reg <= mul_ln11_1_reg_478_pp0_iter5_reg;
        mul_ln11_1_reg_478_pp0_iter7_reg <= mul_ln11_1_reg_478_pp0_iter6_reg;
        mul_ln11_reg_504 <= grp_fu_135_p2;
        or_ln8_reg_447_pp0_iter2_reg <= or_ln8_reg_447;
        or_ln8_reg_447_pp0_iter3_reg <= or_ln8_reg_447_pp0_iter2_reg;
        or_ln8_reg_447_pp0_iter4_reg <= or_ln8_reg_447_pp0_iter3_reg;
        or_ln8_reg_447_pp0_iter5_reg <= or_ln8_reg_447_pp0_iter4_reg;
        or_ln8_reg_447_pp0_iter6_reg <= or_ln8_reg_447_pp0_iter5_reg;
        or_ln8_reg_447_pp0_iter7_reg <= or_ln8_reg_447_pp0_iter6_reg;
        select_ln8_2_reg_472 <= select_ln8_2_fu_311_p3;
        select_ln8_2_reg_472_pp0_iter4_reg <= select_ln8_2_reg_472;
        select_ln8_2_reg_472_pp0_iter5_reg <= select_ln8_2_reg_472_pp0_iter4_reg;
        select_ln8_2_reg_472_pp0_iter6_reg <= select_ln8_2_reg_472_pp0_iter5_reg;
        select_ln8_2_reg_472_pp0_iter7_reg <= select_ln8_2_reg_472_pp0_iter6_reg;
        trunc_ln11_reg_463 <= trunc_ln11_fu_270_p1;
        zext_ln11_reg_457_pp0_iter2_reg[6 : 0] <= zext_ln11_reg_457[6 : 0];
        zext_ln11_reg_457_pp0_iter3_reg[6 : 0] <= zext_ln11_reg_457_pp0_iter2_reg[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_175_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_k_load = add_ln10_fu_274_p2;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        arr1_ce0 = 1'b1;
    end else begin
        arr1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        arr2_ce0 = 1'b1;
    end else begin
        arr2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln10_1_reg_468_pp0_iter7_reg == 1'd1))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_274_p2 = (select_ln8_reg_452 + 7'd1);

assign add_ln11_fu_328_p2 = (mul_ln11_1_reg_478 + zext_ln11_reg_457_pp0_iter3_reg);

assign add_ln13_fu_351_p2 = (mul_ln11_1_reg_478_pp0_iter7_reg + select_ln8_2_reg_472_pp0_iter7_reg);

assign add_ln7_1_fu_180_p2 = (indvar_flatten19_fu_80 + 71'd1);

assign add_ln7_fu_257_p2 = (i_fu_76 + 31'd1);

assign add_ln8_1_fu_230_p2 = (indvar_flatten_fu_72 + 39'd1);

assign add_ln8_fu_305_p2 = (select_ln7_fu_298_p3 + 17'd1);

assign and_ln7_fu_206_p2 = (xor_ln7_fu_194_p2 & icmp_ln10_fu_200_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign arr1_address0 = zext_ln11_1_fu_332_p1;

assign arr2_address0 = zext_ln11_2_fu_337_p1;

assign grp_fu_371_p0 = grp_fu_371_p00;

assign grp_fu_371_p00 = select_ln8_fu_218_p3;

assign grp_fu_371_p1 = 17'd800;

assign grp_fu_371_p2 = ((and_ln7_reg_442_pp0_iter2_reg[0:0] == 1'b1) ? add_ln8_fu_305_p2 : select_ln7_fu_298_p3);

assign icmp_ln10_1_fu_279_p2 = ((add_ln10_fu_274_p2 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_200_p2 = ((ap_sig_allocacmp_k_load == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_175_p2 = ((indvar_flatten19_fu_80 == mul_ln6_1) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_189_p2 = ((indvar_flatten_fu_72 == mul_ln6) ? 1'b1 : 1'b0);

assign mul_ln11_1_fu_318_p1 = 17'd800;

assign or_ln8_fu_212_p2 = (icmp_ln8_fu_189_p2 | and_ln7_fu_206_p2);

assign result_address0 = zext_ln13_fu_355_p1;

assign result_d0 = (mul_ln11_reg_504 + select_ln8_1_fu_344_p3);

assign select_ln7_1_fu_263_p3 = ((icmp_ln8_reg_436[0:0] == 1'b1) ? add_ln7_fu_257_p2 : i_fu_76);

assign select_ln7_fu_298_p3 = ((icmp_ln8_reg_436_pp0_iter2_reg[0:0] == 1'b1) ? 17'd0 : j_fu_68);

assign select_ln8_1_fu_344_p3 = ((or_ln8_reg_447_pp0_iter7_reg[0:0] == 1'b1) ? 32'd0 : sum_fu_60);

assign select_ln8_2_fu_311_p3 = ((and_ln7_reg_442_pp0_iter2_reg[0:0] == 1'b1) ? add_ln8_fu_305_p2 : select_ln7_fu_298_p3);

assign select_ln8_3_fu_236_p3 = ((icmp_ln8_fu_189_p2[0:0] == 1'b1) ? 39'd1 : add_ln8_1_fu_230_p2);

assign select_ln8_fu_218_p3 = ((or_ln8_fu_212_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_k_load);

assign sum_1_fu_360_p2 = (mul_ln11_reg_504 + select_ln8_1_fu_344_p3);

assign trunc_ln11_fu_270_p1 = select_ln7_1_fu_263_p3[16:0];

assign xor_ln7_fu_194_p2 = (icmp_ln8_fu_189_p2 ^ 1'd1);

assign zext_ln11_1_fu_332_p1 = add_ln11_fu_328_p2;

assign zext_ln11_2_fu_337_p1 = grp_fu_371_p3;

assign zext_ln11_fu_226_p1 = select_ln8_fu_218_p3;

assign zext_ln13_fu_355_p1 = add_ln13_fu_351_p2;

always @ (posedge ap_clk) begin
    zext_ln11_reg_457[16:7] <= 10'b0000000000;
    zext_ln11_reg_457_pp0_iter2_reg[16:7] <= 10'b0000000000;
    zext_ln11_reg_457_pp0_iter3_reg[16:7] <= 10'b0000000000;
end

endmodule //dot_product_dot_product_Pipeline_VITIS_LOOP_7_1_VITIS_LOOP_8_2_VITIS_LOOP_10_3
